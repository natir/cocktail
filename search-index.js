var searchIndex = JSON.parse('{\
"cocktail":{"doc":"","i":[[0,"kmer","cocktail","A set of function to convert small sequence (less than 32 …",null,null],[5,"seq2bit","cocktail::kmer","Convert a sequence in 2 bit representation if suseq is …",null,[[],["u64",15]]],[5,"nuc2bit","","Convert a nucleotide in 2bit representation, by use …",null,[[["u8",15]],["u64",15]]],[5,"kmer2seq","","Convert a 2 bit repersentation in String.",null,[[["u8",15],["u64",15]],["string",3]]],[5,"bit2nuc","","Convert the 2bit representation of a nucleotide in …",null,[[["u64",15]],["u8",15]]],[5,"canonical","","Take a kmer and return the canonical form",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"parity_even","","Return true if the kmer parity is even",null,[[["u64",15]],["bool",15]]],[5,"revcomp","","Return the reverse complement of kmer",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"comp","","Return the complement of kmer",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"get_first_bit","","Return true if the right bit of kmer is 1",null,[[["u64",15]],["bool",15]]],[5,"remove_first_bit","","Return the kmer without the rightest bit of kmer",null,[[["u64",15]],["u64",15]]],[5,"hash","","Take a subseq and return the canonical kmer with out the …",null,[[["u8",15]],["u64",15]]],[5,"rev","","Return the reverse of kmer",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"get_kmer_space_size","","Return the cardinality of canonical kmer set for a given …",null,[[["u8",15]],["u64",15]]],[5,"get_hash_space_size","","Return the cardinality of canonical hash set for a given …",null,[[["u8",15]],["u64",15]]],[0,"rle","cocktail","A set of function to convert DNA sequence in Run Length …",null,null],[5,"seq2rle","cocktail::rle","Convert a sequence in rle representation",null,[[],["box",3]]],[5,"rle2kmer","","Convert a rle sequence in 2 bit representation repetition …",null,[[],["u64",15]]],[5,"rle2bit","","Convert a rle in 2bit representation repetition is ignore.",null,[[["u8",15]],["u64",15]]],[5,"rle2seq","","Convert a rle in String.",null,[[],["string",3]]],[0,"tokenizer","cocktail","This module provides iterator to produce kmer from DNA …",null,null],[0,"basic","cocktail::tokenizer","",null,null],[3,"Tokenizer","cocktail::tokenizer::basic","An iterator that takes a DNA sequence and produces kmers, …",null,null],[11,"new","","Create a new Tokenizer on seq DNA kmer size is equal to k",0,[[["u8",15]]]],[0,"minimizer","cocktail::tokenizer","",null,null],[3,"TokenizerMini","cocktail::tokenizer::minimizer","An iterator that takes a DNA sequence and produces kmers …",null,null],[11,"new","","Create a new TokenizerMini on seq DNA kmer size is equal …",1,[[["u8",15]]]],[3,"MinimizerRing","","A struct to get minimizer of sucessive kmer",null,null],[11,"new","","Create a MinimizerRing, with kmer size equale to <code>k</code>, …",2,[[["u64",15],["u8",15]]]],[11,"populate_buffer","","Reset the ring buffer with a new kmer",2,[[["u64",15]]]],[11,"add_kmer","","Add the next kmer",2,[[["u64",15]]]],[11,"get_mini","","Get a pair of value first one is the minimizer second one …",2,[[]]],[0,"rle","cocktail::tokenizer","",null,null],[3,"TokenizerRLE","cocktail::tokenizer::rle","An iterator that takes a DNA sequence and produces kmers, …",null,null],[11,"new","","Create a new TokenizerRLE on seq DNA kmer size is equal …",3,[[["u8",15]]]],[0,"canonical","cocktail::tokenizer","",null,null],[3,"Canonical","cocktail::tokenizer::canonical","An iterator that takes a DNA sequence and produces kmers, …",null,null],[11,"new","","Create a new Canonical tokenizer on seq DNA, kmer size is …",4,[[["u8",15]]]],[0,"binding","cocktail","This module contain function for binding a C and Python …",null,null],[0,"kmer","cocktail::binding","",null,null],[5,"cocktail_seq2bit","cocktail::binding::kmer","Binding for [kmer::seq2bit] in Python the name is seq2bit …",null,[[["usize",15]],["u64",15]]],[5,"cocktail_nuc2bit","","Binding for [kmer::nuc2bit] in Python the name is nuc2bit",null,[[["u8",15]],["u64",15]]],[5,"cocktail_kmer2seq","","Binding for [kmer::kmer2seq] in Python the name is …",null,[[["u8",15],["u64",15]]]],[5,"cocktail_bit2nuc","","Binding for [kmer::bit2nuc] in Python the name is bit2nuc",null,[[["u64",15]],["u8",15]]],[5,"cocktail_canonical","","Binding for [kmer::canonical] in Python the name is …",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"cocktail_parity_even","","Binding for [kmer::parity_even] in Python the name is …",null,[[["u64",15]],["bool",15]]],[5,"cocktail_revcomp","","Binding for [kmer::revcomp] in Python the name is revcomp",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"cocktail_comp","","Binding for [kmer::comp] in Python the name is comp",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"cocktail_get_first_bit","","Binding for [kmer::get_first_bit] in Python the name is …",null,[[["u64",15]],["bool",15]]],[5,"cocktail_remove_first_bit","","Binding for [kmer::remove_first_bit] in Python the name …",null,[[["u64",15]],["u64",15]]],[5,"cocktail_hash","","Binding for [kmer::hash] in Python the name is hash",null,[[["u8",15]],["u64",15]]],[5,"cocktail_rev","","Binding for [kmer::rev] in Python the name is rev",null,[[["u8",15],["u64",15]],["u64",15]]],[5,"cocktail_get_kmer_space_size","","Binding for [kmer::get_kmer_space_size] in Python the …",null,[[["u8",15]],["u64",15]]],[5,"cocktail_get_hash_space_size","","Binding for [kmer::get_hash_space_size] in Python the …",null,[[["u8",15]],["u64",15]]],[0,"tokenizer","cocktail::binding","",null,null],[5,"cocktail_minimizerring_new","cocktail::binding::tokenizer","Create a cocktail MinimizerRing. See [MinimizerRing::new()…",null,[[["u64",15],["u8",15]]]],[5,"cocktail_minimizerring_free","","Free a cocktail minimizer ring",null,[[]]],[5,"cocktail_minimizerring_populate_buffer","","Reset the ring buffer. See […",null,[[["minimizerring",3],["u64",15]]]],[5,"cocktail_minimizerring_add_kmer","","Add the next kmer. See [MinimizerRing::add_kmer()]. In …",null,[[["minimizerring",3],["u64",15]]]],[5,"cocktail_minimizerring_get_mini","","Get the actual minimizer. See [MinimizerRing::get_mini()]…",null,[[["minimizerring",3]],["u64",15]]],[11,"from","cocktail::tokenizer::basic","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","cocktail::tokenizer::minimizer","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","cocktail::tokenizer::rle","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","cocktail::tokenizer::canonical","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"next","cocktail::tokenizer::basic","",0,[[],["option",4]]],[11,"next","cocktail::tokenizer::minimizer","",1,[[],["option",4]]],[11,"next","cocktail::tokenizer::rle","",3,[[],["option",4]]],[11,"next","cocktail::tokenizer::canonical","",4,[[],["option",4]]]],"p":[[3,"Tokenizer"],[3,"TokenizerMini"],[3,"MinimizerRing"],[3,"TokenizerRLE"],[3,"Canonical"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);